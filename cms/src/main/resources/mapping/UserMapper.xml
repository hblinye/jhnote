<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jhnote.cms.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.jhnote.cms.model.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="university" jdbcType="VARCHAR" property="university" />
    <result column="major" jdbcType="VARCHAR" property="major" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.jhnote.cms.model.User">
    <result column="user_key" jdbcType="LONGVARCHAR" property="userKey" />
  </resultMap>
  <sql id="Base_Column_List">
    id, name, university, major, created_at
  </sql>
  <sql id="Blob_Column_List">
    user_key
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="index" resultMap="ResultMapWithBLOBs">
    select *
    from user
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.jhnote.cms.model.User" useGeneratedKeys="true" keyProperty="id">
    insert into user (id, name, university, 
      major, created_at, user_key
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{university,jdbcType=VARCHAR}, 
      #{major,jdbcType=VARCHAR}, #{createdAt,jdbcType=TIMESTAMP}, #{userKey,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jhnote.cms.model.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="university != null">
        university,
      </if>
      <if test="major != null">
        major,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="userKey != null">
        user_key,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="university != null">
        #{university,jdbcType=VARCHAR},
      </if>
      <if test="major != null">
        #{major,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="userKey != null">
        #{userKey,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.jhnote.cms.model.User">
    update user
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="university != null">
        university = #{university,jdbcType=VARCHAR},
      </if>
      <if test="major != null">
        major = #{major,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="userKey != null">
        user_key = #{userKey,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.jhnote.cms.model.User">
    update user
    set name = #{name,jdbcType=VARCHAR},
      university = #{university,jdbcType=VARCHAR},
      major = #{major,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      user_key = #{userKey,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jhnote.cms.model.User">
    update user
    set name = #{name,jdbcType=VARCHAR},
      university = #{university,jdbcType=VARCHAR},
      major = #{major,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>